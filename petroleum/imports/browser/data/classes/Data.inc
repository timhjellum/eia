<?phpclass Data extends localDatabase{var              $jsonType = null;var $sql_select = <<< SQLSELECTs.series_id,nameSQLSELECT;var $sql_from = <<< SQLFROMFROM petimp.SERIES sJOIN petimp.SERIES_LOOKUP slon s.SERIES_ID = sl.SERIES_IDJOIN petimp.BROWSER_DATA_clob bdON bd.series_id = s.series_idSQLFROM;var $sql_where = "";var $sql = "";public function getDataColumnCount($bindVariablesArray) {$where = [];$bindVariables = [];$sql_ori = $this->sql;$this->sql = <<< SQLSELECTCeil(Max(Length(bd.JSON_DATA))/4000) as COLUMN_COUNTSQL;$this->sql .= $this->sql_from;$this->sql .= $this->sql_where;$bindVariables = $bindVariablesArray;$res = array();$res = parent::get($bindVariablesArray);$returnArr = [];foreach($res as $row) {//print_r($row);return $row['column_count'];}//print_r($returnArr);}public function getData($origin_bmi = null, //REG, CTY, OPN, WORLD$destination_bmi = null, //PS, US, RC, RS, RP, RF, PT, PC, PP$origin_type = null,$destination_type = null,$grade_bmi = null,$start_date = null,$end_date = null,$frequency = null){$where         = [];$bindVariables = [];$whereFinal    = [];$frequency = strtoupper($frequency);$ref         = new ReflectionMethod('Data', 'getData');$replaceVals = ['_', '.', ',', '-'];$ot_index = -1;$dt_index = -1;$o_index = -1;$d_index = -1;foreach ($ref->getParameters() as $v) {if (isset(${$v->name}) && (!isEmpty(${$v->name} || ${$v->name} === 0))){if (is_array(${$v->name})) {$varArray = ${$v->name};$where[] = "sl.{$v->name} IN(:" . implode(',:', str_replace($replaceVals, '', $varArray)) . ')';foreach ($varArray as $val) {$bindVariables[ ':' . str_replace($replaceVals, '', $val) ] = $val;}} elseif ($v->name === 'start_date') {$where[]                      = "rpt_date >= :start_date";$bindVariables[':start_date'] = $start_date;} elseif ($v->name === 'end_date') {$where[]                    = "rpt_date <= :end_date";$bindVariables[':end_date'] = $end_date;} else {$where[]                      = "sl.{$v->name} = :{$v->name}";$bindVariables[":{$v->name}"] = ${$v->name};}}else{if($v->name==='grade_bmi')$where[] = "sl.grade_bmi = -1";}}//Add where conditions to sql stringif (count($where) !== 0) {$this->sql_where = ' WHERE (' . implode(' AND ', $where) .')';}try {$dataColumnCount = $this->getDataColumnCount($bindVariables);for($i = 0; $i < $dataColumnCount; $i++) {$this->sql_select .= ', cast(substr(json_data,' . $i * 4000 . ',4000) as varchar2(4000)) as json_data_' . $i;}$this->sql = 'SELECT ' . $this->sql_select . $this->sql_from . $this->sql_where;//print $this->sql;//print_r($bindVariables);$res = array();$res = parent::get($bindVariables);$recordcount = count($res);//print_r($res);//print $recordcount;$returnArr = [];for($i = 0; $i < $recordcount; $i++) {$data_json = '';for($j = 0; $j < $dataColumnCount; $j++) {if(isset($res[$i]['json_data_' . $j])){$data_json .= $res[$i]['json_data_' . $j];}}$returnArr[$res[$i]['series_id']] = ['seriesID'        => $res[$i]['series_id'],'data'            => json_decode($data_json)];}return array_values($returnArr);} catch (Exception $e) {throw $e;}}public function getPinned($series_id = null){$where         = [];$bindVariables = [];$whereFinal    = [];$ref         = new ReflectionMethod('Data', 'get');$replaceVals = ['_', '.', ',', '-'];for($x=0;$x<count($series_id);$x++){if(empty($series_id[$x])){array_splice($series_id,$x,1);}}if(!isset($series_id))return [];if (isset($series_id) && (!isEmpty($series_id || $series_id === 0))) {if (is_array($series_id)) {foreach($series_id as $k1=>$v1) {if(!$v1)unset($series_id[$k1]);}$varArray = $series_id;$where[] = "sl.series_id IN(:" . implode(',:', str_replace($replaceVals, '', $varArray)) . ')';foreach ($varArray as $val) {$bindVariables[ ':' . str_replace($replaceVals, '', $val) ] = $val;}} else {$where[]                      = "sl.series_id = :series_id";$bindVariables[":series_id"] = $series_id;}}//Add where conditions to sql stringif (count($where) !== 0) {$this->sql_where = ' WHERE (' . implode(' OR ', $where) .')';}try {$dataColumnCount = $this->getDataColumnCount($bindVariables);for($i = 0; $i < $dataColumnCount; $i++) {$this->sql_select .= ', cast(substr(json_data,' . $i * 4000 . ',4000) as varchar2(4000)) as json_data_' . $i;}$this->sql = 'SELECT ' . $this->sql_select . $this->sql_from . $this->sql_where;$res = array();$res = parent::get($bindVariables);$recordcount = count($res);//print_r($res);$returnArr = [];for($i = 0; $i < $recordcount; $i++) {$data_json = '';for($j = 0; $j < $dataColumnCount; $j++) {if(isset($res[$i]['json_data_' . $j])){$data_json .= $res[$i]['json_data_' . $j];}}$returnArr[$res[$i]['series_id']] = ['seriesID'        => $res[$i]['series_id'],'data'            => json_decode($data_json)];}return array_values($returnArr);} catch (Exception $e) {throw $e;}}